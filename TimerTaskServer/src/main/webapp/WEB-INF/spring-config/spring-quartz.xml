<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
			http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	
	<context:property-placeholder location="classpath:quartz.properties" />
	
	<!-- 心跳设置  -->
	<!-- 工作的bean -->
    <bean id="myJob" class="com.leederedu.educhat.quartz.BeatJob" >
    	<property name="sessionContext" ref="sessionContext"/>
    	<property name="beatCommand" ref="beatCmd"/>
    </bean>
    
	 <!-- job的配置开始 -->
    <bean id="myJobDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="myJob" />
        </property>
        <property name="targetMethod">
            <value>work</value>
        </property>
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="true" />
    </bean>
    <!-- job的配置结束 -->
    
	<!-- quartz-2.x的配置 -->
    <bean id="myJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="myJobDetail" />
        </property>
        <property name="cronExpression">
            <value>0 0/2 * * * ?</value>
        </property>
    </bean>
    
    <!-- 定时迁移历史数据设置  -->
    <bean id="moveDataJob" class="com.leederedu.educhat.quartz.MigrationHistoryJob" >
    	<property name="sessionContext" ref="sessionContext"/>
    	<property name="eventCommand" ref="thirdEventCmd"/>
    </bean>
    <bean id="moveDataJobDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="moveDataJob" />
        </property>
        <property name="targetMethod">
            <value>work</value>
        </property>
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="true" />
    </bean>
    <bean id="moveDataJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="moveDataJobDetail" />
        </property>
        <property name="cronExpression">        	  
            <value>0 0 3 * * ?</value>
            <!--<value>0 0,10,20,30,40,50 * * * ?</value>-->
        </property>
    </bean>
    
    
        <!-- 离线系统消息推送 -->
    <bean id="offlineMsgJob" class="com.leederedu.educhat.quartz.OfflineMsgJob" >
    	<property name="sessionContext" ref="sessionContext"/>
    </bean>
    <bean id="offlineMsgJobDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="offlineMsgJob" />
        </property>
        <property name="targetMethod">
            <value>work</value>
        </property>
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="true" />
    </bean>
    <bean id="offlineMsgJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="offlineMsgJobDetail" />
        </property>
        <property name="cronExpression">        	  
             <value>0/5 * * * * ?</value>          
        </property>
    </bean>
    
    <!-- 定时生成上学放学时间设置  -->
    <bean id="schooltimeDataJob" class="com.leederedu.educhat.quartz.SchoolTimeJob" >
    	<property name="sessionContext" ref="sessionContext"/>
    	<property name="eventCommand" ref="thirdEventCmd"/>
    </bean>
    <bean id="schooltimeDataJobDetail"
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="schooltimeDataJob" />
        </property>
        <property name="targetMethod">
            <value>work</value>
        </property>
        <!-- 是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
        <property name="concurrent" value="true" />
    </bean>
    <bean id="schooltimeDataJobTrigger"
        class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="schooltimeDataJobDetail" />
        </property>
        <property name="cronExpression">        	  
            <value>0 0 1 ? * L</value>            
        </property>
    </bean>
    
    
    <!-- 管理类：配置Schedule信息，与spring容器的生命周期建立联系等功能 -->  
    <!-- 启动触发器的配置开始 -->
    <bean id="scheduler"  lazy-init="false" autowire="no"
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <!-- 
        <property name="dataSource" ref="dataSource" />  
         -->
        <!-- 在SchedulerFactoryBean初始化完成后，延迟300秒启动Scheduler，以便让Spring能够更快初始化容器中剩余的Bean。-->   
        <property name="startupDelay" value="300" />  
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey" />  
        <property name="quartzProperties">  
            <props>  
                <prop key="org.quartz.scheduler.instanceName">${org.quartz.scheduler.instanceName}</prop>  
                <prop key="org.quartz.scheduler.instanceId">${org.quartz.scheduler.instanceId}</prop>  
                <prop key="org.quartz.threadPool.class">${org.quartz.threadPool.class}</prop>  
                <prop key="org.quartz.threadPool.threadCount">${org.quartz.threadPool.threadCount}</prop>  
                <prop key="org.quartz.threadPool.threadPriority">${org.quartz.threadPool.threadPriority}</prop>  
                <prop key="org.quartz.jobStore.class">${org.quartz.jobStore.class}</prop>
                <!--  
                <prop key="org.quartz.jobStore.misfireThreshold"></prop>
                <prop key="org.quartz.jobStore.driverDelegateClass"></prop>  
                <prop key="org.quartz.jobStore.selectWithLockSQL"></prop>  
                <prop key="org.quartz.jobStore.tablePrefix"></prop>  
                <prop key="org.quartz.jobStore.isClustered">true</prop>  
                <prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>  
                -->
            </props>  
        </property>  
        <!-- scheduler by QuartzAdjust -->  
        <property name="triggers">  
            <list>  
                <ref bean="myJobTrigger" />             
                <ref bean="moveDataJobTrigger" />
                <ref bean="schooltimeDataJobTrigger" />    
                 <!--<ref bean="offlineMsgJobTrigger" /> -->  
            </list>  
        </property>  
        <property name="autoStartup" value="true"></property>
    </bean> 
    <!-- 启动触发器的配置结束 --> 
    <!-- 调度的配置结束 -->
   
</beans>
